# Custom type declarations

enum UserRole {
    Student
    Teacher
}

enum EnrollStatus {
    Pending
    Accepted
    Rejected
}

type UserProfile {
    userId: String!
    username: String!
    role: UserRole!
    firstName: String
    lastName: String
    phone: String
    address: String
    email: String
    birthday: String
    pictureUrl: String
}

# Status user
type SignedInUser {
    signedIn: Boolean!
    user: UserProfile
}

type CourseDetails {
    courseId: Int!
    host: UserProfile!
    name: String!
    description: String
}

type CourseList {
    courseList: [CourseDetails!]!
    totalRecords: Int!
    pageNumber: Int!
    totalPages: Int!
}

type UserCourseList {
    courseList: [CourseDetails!]!
    status: EnrollStatus!
    totalRecords: Int!
    pageNumber: Int!
    totalPages: Int!
}
type userList {
    userList: [UserProfile!]!
    status: EnrollStatus!
    totalRecords: Int!
    pageNumber: Int!
    totalPages: Int!
}

# Top level declarations
type Query {
    # get user is logging in, get by token in cookie from req
    currentUser: SignedInUser!
    # get user info by id
    userProfile(userId: Int!): UserProfile
    # check username before create account
    usernameAvailability(username: String!): Boolean!
    # get list course
    courseList(
        hostId: Int
        pageNumber: Int = 0
        pageSize: Int = 10
    ): CourseList!
    # get course by Id
    course(courseId: Int!): CourseDetails
    # get courses  from a user
    userCourseList(
        userId: Int!
        status: EnrollStatus = Accepted
        pageNumber: Int = 0
        pageSize: Int = 10
    ): UserCourseList!
    # get users from a course
    courseUserList(
        courseId: Int!
        status: EnrollStatus = Accepted
        pageNumber: Int = 0
        pageSize: Int = 10
    ): userList!
}

type BooleanMessage {
    success: Boolean!
    message: String
}

# Custom input type declarations

# input for create user
input UserAccountInput {
    username: String!
    password: String!
    role: UserRole! = Student
    firstName: String
    lastName: String
    phone: String
    address: String
    birthday: String
}

input UserUpdateInput {
    firstName: String
    lastName: String
    address: String
    phone: String
    birthday: String
    # pictureUrl: String
}

input PasswordUpdateInput {
    currentPassword: String!
    newPassword: String!
}

type Mutation {
    # create account, default Student type
    createUserAccount(user: UserAccountInput!): UserProfile!
    # edit user info
    updateUserProfile(changes: UserUpdateInput!): UserProfile!
    # update password
    updateUserPassword(
        currentPassword: String!
        newPassword: String!
    ): BooleanMessage!
    # student enroll
    enrollCourse(courseId: Int!, description: String): BooleanMessage!
    # create course member (for teacher add user to course)
    createCourseMember(courseId: Int, userId: Int!): BooleanMessage!
    # update member enroll status (for teacher)
    updateCourseMember(
        courseMemberId: Int!
        status: EnrollStatus!
        description: String
    ): BooleanMessage!
}
