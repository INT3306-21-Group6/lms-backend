scalar Date
# Custom type declarations

enum UserRole {
    Student
    Teacher
}

enum EnrollStatus {
    Pending
    Accepted
    Rejected
}

type UserProfile {
    userId: String!
    username: String!
    role: UserRole!
    firstName: String
    lastName: String
    phone: String
    address: String
    email: String
    birthday: String
    pictureUrl: String
}

# Status user
type SignedInUser {
    signedIn: Boolean!
    user: UserProfile
}

type CourseDetails {
    courseId: Int!
    host: UserProfile!
    name: String!
    description: String
}

type CourseList {
    courseList: [CourseDetails!]!
    totalRecords: Int!
    pageNumber: Int!
    totalPages: Int!
}

type UserCourseList {
    courseList: [CourseDetails!]!
    status: EnrollStatus!
    totalRecords: Int!
    pageNumber: Int!
    totalPages: Int!
}

type UserList {
    userList: [UserProfile!]!
    status: EnrollStatus!
    totalRecords: Int!
    pageNumber: Int!
    totalPages: Int!
}

type Thread {
    forumThreadId: Int!
    author: UserProfile!
    title: String!
    content: String!
    createAt: Date!
    updateAt: Date!
}

type Post {
    postId: Int!
    thread: Thread!
    author: UserProfile!
    content: String!
    createAt: Date!
    updateAt: Date!
}


type ThreadList {
    forumThreadList: [Thread!]!
    totalRecords: Int!
    pageNumber: Int!
    totalPages: Int!
}

type Document {
    documentId: Int!
    # course: CourseDetails!
    author: UserProfile!
    title: String!
    description: String!
    files: [DocumentFile!]!
    createAt: Date!
    updateAt: Date!
}



type DocumentList {
    documentList: [Document!]!
    totalRecords: Int!
    pageNumber: Int!
    totalPages: Int!
}

type PostList {
    postList: [Post!]!
    totalRecords: Int!
    pageNumber: Int!
    totalPages: Int!
}

type Assignment {
    assignmentId: Int!
    course: CourseDetails!
    title: String!
    author: UserProfile!
    content: String!
    createAt: Date!
    dueDate: Date!
}

type AssignmentList {
    assignmentList: [Assignment!]!
    totalRecords: Int!
    pageNumber: Int!
    totalPages: Int!
}

type BooleanMessage {
    success: Boolean!
    message: String
}

type InsertedMessage {
    success: Boolean!
    insertedId: Int
    message: String
}

type DocumentFile {
    documentFileId: Int!
    name: String!
    url: String!
    mimetype: String!
}

type FileUpload {
    uuid: String!
    filename: String!
    mimetype: String!        
}

# Top level declarations
type Query {
    # get user is logging in, get by token in cookie from req
    currentUser: SignedInUser!
    # get user info by id
    userProfile(userId: Int!): UserProfile
    # check username before create account
    usernameAvailability(username: String!): Boolean!
    # get list course
    courseList(hostId: Int, pageNumber: Int = 0, pageSize: Int = 10): CourseList!
    # get course by Id
    course(courseId: Int!): CourseDetails
    # get courses  from a user
    userCourseList(userId: Int!, status: EnrollStatus = Accepted, pageNumber: Int = 0, pageSize: Int = 10): UserCourseList!
    # get users from a course
    courseUserList(courseId: Int!, status: EnrollStatus = Accepted, pageNumber: Int = 0, pageSize: Int = 10): UserList!
    # get threads in a course
    threadList(courseId: Int!, pageNumber: Int = 0, pageSize: Int = 10): ThreadList!
    # get posts in a thread
    postList(threadId: Int!, pageNumber: Int = 0, pageSize: Int = 10): PostList!
    # get assignments in a course
    assignmentList(courseId: Int!, pageNumber: Int = 0, pageSize: Int = 10): AssignmentList!
    #get list document in a course
    documentList(courseId: Int!, pageNumber:Int = 0, pageSize: Int = 10): DocumentList!
}

# Custom input type declarations

# input for create user
input UserAccountInput {
    username: String!
    password: String!
    role: UserRole! = Student
    firstName: String
    lastName: String
    phone: String
    address: String
    birthday: String
}

input UserUpdateInput {
    firstName: String
    lastName: String
    address: String
    phone: String
    birthday: String
}

input File {
    uuid: String!
    filename: String!
    mimetype: String!      
}

input DocumentInput {
    courseId:Int! 
    title: String! 
    description: String!
    files: [File!]! = {files: []}
}

input AssignmentInput {
    courseId: Int! 
    title: String! 
    content: String! 
    dueDate: Date
    files: [File!]! = {files: []}
}

type Mutation {
    # create account, default Student type
    createUserAccount(user: UserAccountInput!): UserProfile!
    # edit user info
    updateUserProfile(changes: UserUpdateInput!): UserProfile!
    # update password
    updateUserPassword(currentPassword: String!, newPassword: String!): BooleanMessage!
    # user upload avatar
    uploadAvatar(avatar: Upload!): BooleanMessage!
    # student enroll
    enrollCourse(courseId: Int!, description: String): BooleanMessage!
    # update course details
    updateCourse(courseId: Int!, description: String!): BooleanMessage!
    # create course (for teacher)
    createCourse(name: String! description: String!): InsertedMessage! 
    # create post 
    createPost(threadId: Int! content: String!): InsertedMessage!
    # edit post
    editPost(postId: Int! content: String!): BooleanMessage!
    # create assignment 
    createAssignment(assignment: AssignmentInput!): InsertedMessage!
    # edit assignment
    editAssignment(assignmentId: Int! title: String! content: String! dueDate: Date!): BooleanMessage!
    # update course member details
    updateCourseMember(courseMemberId: Int!, status: EnrollStatus!, description: String): BooleanMessage!
    # create thread forum
    createThread(courseId: Int!, title: String!, content: String!): InsertedMessage!
    # edit thread details
    editThread(threadId:Int! title: String content: String): BooleanMessage!
    # create document (for teacher)
    createDocument(document: DocumentInput!): InsertedMessage! 
    # edit document content (for teacher)
    editDocument(documentId: Int! title: String description: String): BooleanMessage!
    # file upload
    uploadFileSingle(file: Upload!): FileUpload!
    uploadFileMultiple(files: [Upload!]!): [FileUpload!]!
}
